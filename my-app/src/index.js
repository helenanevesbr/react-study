import React from 'react';
import ReactDOM from 'react-dom/client';

import './index.css';

const books = [
  {
    author: 'Jordan Moore',
    title: 'Interesting Facts For Curious Minds',
    img: './images/interestingfactsforthecuriousmind.jpg',
    id: 1,
  },
  
  {
    author: "Bonnie Garmus",
    title: "Lessons in Chemistry: A Novel",
    img: './images/lessonsinchesmitry.jpg',
    id: 2,
  }

]

function BookList() {

  const getBook = (id) => {
    const book = books.find(
      (book) => book.id === id
    );
    console.log(book);
  }

  return (
    <section className='booklist'>
      {books.map((book)=>{

        return <Book
          {...book}
          key={book.id}
          getBook={getBook}
        />;
        /*React can only pass props down. In other words, data can only flow from parent component to child component.
        That means if component Booklist returns the component Book, then I can pass data from Booklist to Book (as you can see above in props), but not the other way around.*/

      })}
    </section>
  );
}

const Book = ({img, title, author, id, getBook}) => {

  return (
    <article className='book'>
      <img src={img} alt={title} />
      <h2>{title}</h2>

      <button onClick={getBook(id)}>Get book title</button>
      {/*althought we can see the logs generated by this function in the console, they are triggered when the application loads, not by the click event.
      Because we have parentheses here and, in JavaScript, this means the code is invoking the function and running it right away. React doesn't prevent it to run instantly, even if it is inside an event handler attribute.*/}

      <h4>{author} </h4>
    </article>
  );
};

const root = ReactDOM.createRoot(document.getElementById('root'));

root.render(<BookList/>)